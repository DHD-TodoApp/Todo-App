// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  SubtodosReadSubtodosData,
  SubtodosReadSubtodosResponse,
  SubtodosCreateSubtodoData,
  SubtodosCreateSubtodoResponse,
  SubtodosReadSubtodoData,
  SubtodosReadSubtodoResponse,
  SubtodosUpdateSubtodoData,
  SubtodosUpdateSubtodoResponse,
  SubtodosDeleteSubtodoData,
  SubtodosDeleteSubtodoResponse,
  TodosReadTodosData,
  TodosReadTodosResponse,
  TodosCreateTodoData,
  TodosCreateTodoResponse,
  TodosReadTodoData,
  TodosReadTodoResponse,
  TodosUpdateTodoData,
  TodosUpdateTodoResponse,
  TodosDeleteItemData,
  TodosDeleteItemResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SubtodosService {
  /**
   * Read Subtodos
   * Retrieve subtodos for a specific todo.
   * @param data The data for the request.
   * @param data.todoId
   * @param data.skip
   * @param data.limit
   * @returns SubTodosPublic Successful Response
   * @throws ApiError
   */
  public static readSubtodos(
    data: SubtodosReadSubtodosData,
  ): CancelablePromise<SubtodosReadSubtodosResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/todos/{todo_id}/subtodos/",
      path: {
        todo_id: data.todoId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Subtodo
   * Create a new subtodo for a specific todo.
   * @param data The data for the request.
   * @param data.todoId
   * @param data.requestBody
   * @returns SubTodoPublic Successful Response
   * @throws ApiError
   */
  public static createSubtodo(
    data: SubtodosCreateSubtodoData,
  ): CancelablePromise<SubtodosCreateSubtodoResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/todos/{todo_id}/subtodos/",
      path: {
        todo_id: data.todoId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Subtodo
   * Get a specific subtodo.
   * @param data The data for the request.
   * @param data.todoId
   * @param data.id
   * @returns SubTodoPublic Successful Response
   * @throws ApiError
   */
  public static readSubtodo(
    data: SubtodosReadSubtodoData,
  ): CancelablePromise<SubtodosReadSubtodoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/todos/{todo_id}/subtodos/{id}",
      path: {
        todo_id: data.todoId,
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Subtodo
   * Update a subtodo.
   * @param data The data for the request.
   * @param data.todoId
   * @param data.id
   * @param data.requestBody
   * @returns SubTodoPublic Successful Response
   * @throws ApiError
   */
  public static updateSubtodo(
    data: SubtodosUpdateSubtodoData,
  ): CancelablePromise<SubtodosUpdateSubtodoResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/todos/{todo_id}/subtodos/{id}",
      path: {
        todo_id: data.todoId,
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Subtodo
   * Delete a subtodo.
   * @param data The data for the request.
   * @param data.todoId
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteSubtodo(
    data: SubtodosDeleteSubtodoData,
  ): CancelablePromise<SubtodosDeleteSubtodoResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/todos/{todo_id}/subtodos/{id}",
      path: {
        todo_id: data.todoId,
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TodosService {
  /**
   * Read Todos
   * Retrieve todos.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @param data.search
   * @returns TodosPublic Successful Response
   * @throws ApiError
   */
  public static readTodos(
    data: TodosReadTodosData = {},
  ): CancelablePromise<TodosReadTodosResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/todos/",
      query: {
        skip: data.skip,
        limit: data.limit,
        search: data.search,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Todo
   * Create new todo.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TodoPublic Successful Response
   * @throws ApiError
   */
  public static createTodo(
    data: TodosCreateTodoData,
  ): CancelablePromise<TodosCreateTodoResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/todos/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Todo
   * Get todo by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns TodoPublic Successful Response
   * @throws ApiError
   */
  public static readTodo(
    data: TodosReadTodoData,
  ): CancelablePromise<TodosReadTodoResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/todos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Todo
   * Update an item.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns TodoPublic Successful Response
   * @throws ApiError
   */
  public static updateTodo(
    data: TodosUpdateTodoData,
  ): CancelablePromise<TodosUpdateTodoResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/todos/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Item
   * Delete a todo.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteItem(
    data: TodosDeleteItemData,
  ): CancelablePromise<TodosDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/todos/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
