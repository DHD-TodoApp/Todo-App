name: Test Docker Compose

on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize

jobs:

  test-docker-compose:
    runs-on: ubuntu-latest
    env:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: app
      POSTGRES_SERVER: db
      PROJECT_NAME: fastapi
      FIRST_SUPERUSER: admin@gmail.com
      FIRST_SUPERUSER_PASSWORD: admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create env file
        run: |
          echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
          echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
          echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
          echo "POSTGRES_SERVER=${POSTGRES_SERVER}" >> .env
          echo "PROJECT_NAME=${PROJECT_NAME}" >> .env
          echo "FIRST_SUPERUSER=${FIRST_SUPERUSER}" >> .env
          echo "FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}" >> .env
      - run: docker compose build
      - run: docker compose down -v --remove-orphans
      
      # Start DB first
      - name: Start Database
        run: |
          docker compose up -d db
          echo "Waiting for PostgreSQL to be ready..."
          sleep 15

      # Then other services
      - name: Start Services
        run: |
          docker compose up -d --wait backend frontend adminer
          echo "Waiting for services to initialize..."
          sleep 20

      # Debug information
      - name: Debug Information
        run: |
          echo "Docker Compose Status:"
          docker compose ps
          echo "\nDocker Networks:"
          docker network ls
          echo "\nBackend Logs:"
          docker compose logs backend
          echo "\nDatabase Logs:"
          docker compose logs db

      - name: Test backend is up
        run: |
          curl -v http://localhost:8000/api/v1/utils/health-check || true
