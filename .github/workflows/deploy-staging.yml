name: Deploy to Staging

on:
  push:
    branches:
      - main

jobs:
  deploy:
    if: github.repository_owner != 'fastapi'
    runs-on:
      - self-hosted
      - staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Clean up Docker
        run: |
          docker system prune -af --volumes
          docker image prune -af
          df -h
          
      - name: Create .env file
        run: |
          touch .env
          echo DOMAIN=localhost >> .env
          echo FRONTEND_HOST=http://localhost:5173 >> .env
          echo ENVIRONMENT=staging >> .env
          echo PROJECT_NAME="To Do Project Demo CICD - Stagging" >> .env
          echo STACK_NAME=to-do-project-demo-cicd-stagging >> .env
          echo BACKEND_CORS_ORIGINS="http://localhost,http://localhost:5173,https://localhost,https://localhost:5173" >> .env
          echo SECRET_KEY=${SECRET_KEY} >> .env
          echo FIRST_SUPERUSER=${FIRST_SUPERUSER} >> .env
          echo FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD} >> .env
          echo SMTP_HOST=smtp.gmail.com >> .env
          echo SMTP_USER= >> .env
          echo SMTP_PASSWORD= >> .env
          echo EMAILS_FROM_EMAIL= >> .env
          echo SMTP_TLS=True >> .env
          echo SMTP_SSL=False >> .env
          echo SMTP_PORT=587 >> .env
          echo POSTGRES_SERVER=localhost >> .env
          echo POSTGRES_PORT=5434 >> .env
          echo POSTGRES_DB=app >> .env
          echo POSTGRES_USER=postgres >> .env
          echo POSTGRES_PASSWORD=${POSTGRES_PASSWORD} >> .env
          echo SENTRY_DSN= >> .env
          echo DOCKER_IMAGE_BACKEND=backend >> .env
          echo DOCKER_IMAGE_FRONTEND=frontend >> .env
          
          cat .env
        shell: bash
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
          FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          
      - name: Build and Deploy
        run: |
          docker compose -f docker-compose.yml --project-name ${STACK_NAME} build || (docker system prune -af && docker compose -f docker-compose.yml --project-name ${STACK_NAME} build)
          docker compose -f docker-compose.yml --project-name ${STACK_NAME} up -d
        env:
          STACK_NAME: ${{ secrets.STACK_NAME_STAGING }}
          DOCKER_BUILDKIT: 1
